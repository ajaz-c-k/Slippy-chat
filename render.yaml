# render.yaml
# This file defines the services for your Slippy Chat application on Render.

services:
  # Backend Web Service (Flask with Socket.IO)
  - type: web
    name: slippy-chat-backend # A unique name for your backend service on Render
    env: python # Specifies that this service uses a Python environment
    # Crucial: Tells Render to navigate into your 'backend' folder
    rootDirectory: backend/
    # Command to install Python dependencies from requirements.txt
    # Render automatically sets up a virtual environment.
    buildCommand: pip install -r requirements.txt
    # Command to start your Flask-SocketIO application using Gunicorn.
    # 'app:socketio' refers to the 'socketio' instance within your 'app.py' module.
    # The '--worker-class' and '-w 1' are essential for WebSocket support.
    startCommand: gunicorn app:socketio --worker-class geventwebsocket.gunicorn.workers.GeventWebSocketWorker -w 1
    envVars:
      # Placeholder for your frontend's public URL. Set this in Render dashboard after frontend deploys.
      - key: FRONTEND_URL
        sync: false
      # Placeholder for your Flask app's secret key. Generate a strong, random one and set in Render.
      - key: FLASK_SECRET_KEY
        sync: false
      # Optional: Placeholder for Redis URL. Only set if you provision a Redis instance on Render for Socket.IO scaling.
      - key: REDIS_URL
        sync: false
    autoDeploy: true # Automatically redeploy this service when you push new commits to your Git branch
    # Choose a plan based on your anticipated usage. 'starter' is often suitable for development.
    plan: starter

  # Frontend Static Site (React/Vite)
  - type: static
    name: slippy-chat-frontend # A unique name for your frontend service on Render
    env: node # Specifies that this service uses a Node.js environment
    # Command to install Node.js dependencies and build your React application.
    # This matches your 'npm run build' script from package.json.
    buildCommand: npm install && npm run build
    # The directory where your compiled/built frontend files are located after 'npm run build'.
    # For Vite, this is typically 'dist'.
    staticPublishPath: dist
    envVars:
      # Placeholder for your backend's public URL. Set this in Render dashboard after backend deploys.
      - key: VITE_REACT_APP_API_URL
        sync: false
    autoDeploy: true # Automatically redeploy this service when you push new commits
